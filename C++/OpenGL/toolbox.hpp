#ifndef TOOLBOX_HPP // This pattern is to prevent symbols to be loaded multiple times
#define TOOLBOX_HPP // from multiple imports

////////// INIT ////////////////////////////////////////////////////////////////////////////////////

/// OpenGL + GLUT ////
// #include <GL/glut.h>
// #include <GL/glu.h>
#include <GL/gl.h>

#include <glm/glm.hpp>
using glm::vec2;
using glm::vec3;
using glm::mat4;
#include <glm/vec4.hpp> 
using glm::vec4;
#include <glm/gtc/matrix_transform.hpp>
using glm::translate, glm::scale, glm::rotate;
#include <glm/gtc/type_ptr.hpp>
using glm::value_ptr;


////////// TYPE DEFINES ////////////////////////////////////////////////////////////////////////////

typedef unsigned char ubyte;
typedef unsigned int  uint;
typedef unsigned long ulong;
typedef vec2 /*----*/ vec2f;
typedef vec3 /*----*/ vec3f;
typedef vec4 /*----*/ vec4f;
typedef mat4 /*----*/ mat4f;


////////// VECTOR STRUCTS //////////////////////////////////////////////////////////////////////////

typedef struct{
    union{ uint v0; uint f0; };
    union{ uint v1; uint f1; };
    union{ uint v2; uint f2; };
} vec3u;


////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////// OGL_utils.cpp //////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////


////////// TRIGONOMETRY ////////////////////////////////////////////////////////////////////////////

// Cosine and Sine in degrees
// Author: Willem A. (Vlakkies) Schre√ºder  
double Cos( double x );
double Sin( double x );
double Tan( double x );
float  Cosf( float x );
float  Sinf( float x );
float  Tanf( float x );
float  Atan2f( float y, float x );



////////// LINEAR ALGEBRA //////////////////////////////////////////////////////////////////////////
mat4f identity_mtx44f( void );



////////// POLYHEDRA ///////////////////////////////////////////////////////////////////////////////
static void Vertex( int th, int ph );



////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////// LightSource.cpp ////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct{
    // Light source for default Phong shading
    uint  ID; // ----- GL light source enum
    vec4f position; // Position in the world frame
    vec4f ambient;
	vec4f diffuse;
	vec4f specular;
}LightSource;

LightSource* make_white_light_source( const vec4f posn, uint sourcEnum, int ambientPrcnt, int diffusePrcnt, int specularPrcnt );
void /*---*/ illuminate_with_source( LightSource* lite );


#endif