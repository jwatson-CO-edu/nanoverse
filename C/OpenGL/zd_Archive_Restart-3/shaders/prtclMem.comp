//
// Particle compute shader
// Author: Willem A. (Vlakkies) Schre√ºder, https://www.prinmath.com/
//
#version 440 compatibility
#extension GL_ARB_compute_variable_group_size : enable

////////// PROGRAM STRUCTS /////////////////////////////////////////////////////////////////////////

struct vec3u{
   uint f0;
   uint f1;
   uint f2;
};

////////// SHADER INPUTS ///////////////////////////////////////////////////////////////////////////

// Array positions

layout(binding= 4) buffer posbuf { vec4  posnArr[]; };
layout(binding= 7) buffer membuf { uint  mmbrArr[]; };
layout(binding= 8) buffer orgbuf { vec4  orgnArr[]; };
layout(binding= 9) buffer vt1buf { vec4  vtx1Arr[]; };
layout(binding=10) buffer vt2buf { vec4  vtx2Arr[]; };
layout(binding=14) buffer nghbuf { vec3u ngbrArr[]; };


//  Work group size
layout(local_size_variable) in;


// //  Sphere
// uniform float radius;
// uniform float dim;


////////// SHADER CONSTANTS ////////////////////////////////////////////////////////////////////////

//  Gravity
// const vec3   G = vec3(0.0,-9.8,0.0);
//  Time step
// const float  dt = 0.1;

//  Compute shader
void main(){
   //  Global Thread ID
   uint  gid = gl_GlobalInvocationID.x;

   vec3 v0, v1, v2, seg0, seg1, seg2, segCen0, segCen1, segCen2, norm0, norm1, norm2, diff0, diff1, diff2, q;
   q  = posnArr[gid].xyz;
   v0 = orgnArr[ mmbrArr[gid] ].xyz;
   v1 = vtx1Arr[ mmbrArr[gid] ].xyz;
   v2 = vtx2Arr[ mmbrArr[gid] ].xyz;
   seg0    = v1 - v0;
   seg1    = v2 - v1;
   seg2    = v0 - v2;
   segCen0 = ( v0 + v1 )/2.0;
   segCen1 = ( v1 + v2 )/2.0;
   segCen2 = ( v2 + v0 )/2.0;
   norm0   = cross( segCen0, seg0 );
   norm1   = cross( segCen1, seg1 );
   norm2   = cross( segCen2, seg2 );
   diff0   = q - segCen0;
   diff1   = q - segCen1;
   diff2   = q - segCen2;

   if(dot( diff0, norm0 ) < 0.0){  mmbrArr[gid] = ngbrArr[ mmbrArr[gid] ].f0;  }
   if(dot( diff1, norm1 ) < 0.0){  mmbrArr[gid] = ngbrArr[ mmbrArr[gid] ].f1;  }
   if(dot( diff2, norm2 ) < 0.0){  mmbrArr[gid] = ngbrArr[ mmbrArr[gid] ].f2;  }

   //  Get position and velocity
   // vec3 ac = cellAcl[ mmbrArr[gid] ].xyz;
   // vec3 p0 = posnArr[gid].xyz;
   // vec3 v0 = veloArr[gid].xyz;
   // vec3 cl = colrArr[gid].rgb;

   // //  Compute new position and velocity
   // vec3 p = p0 + v0;
   // vec3 v = v0 + ac * (cl.r + cl.g + cl.b)/3.0;

   // //  Update position and velocity
   // posnArr[gid].xyz = p;
   // veloArr[gid].xyz = v;
}
